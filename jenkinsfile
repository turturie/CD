node {
  try {
    //this needs to be the very first steps!
    deleteDir()
    checkout()
    version = sh(returnStdout: true, script: "git tag --sort version:refname | tail -1").trim()
    version = bumpMinorVersion(version)

    def branch_type = get_branch_type(env.BRANCH_NAME)
    echo env.BRANCH_NAME
    echo branch_type
    currentBuild.displayName = "${version}-build${BUILD_NUMBER}"
    

 


    if ( branch_type == "pr") {
      commit_stage()
    } else if ( branch_type == "master") {
      commit_stage()
      publish_artifact()
      deploy("INT")
      acceptance_test()
      deploy("PERF")
      performance_test()
      deploy("STG")
    } else if (branch_type == "tag") {
      
      deploy("PROD")
    }
    
  } catch(err) { // timeout reached or input false
    def user = err.getCauses()[0].getUser()
    if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
        currentBuild.result = 'SUCCESS'
    } else {
        echo "Aborted by: [${user}]"
    }    
  } finally {
      echo "doing some cleanup..."
  }
}




//utility
def checkout(){
  stage('checkout') {
    checkout scm
  }
}

def commit_stage() {
  stage('unit test') {
    echo "running unit test..."
  }
  stage('sonarQube'){
    echo "running static analysis..."
  }
}

def publish_artifact(){
  stage('publish') {
      echo "package and publish artifact..."
  }
}

def deploy(String env){
  stage(env + ' deploy'){
  if( env == "STG") {
  	timeout(time: 1, unit: 'MINUTES') {
    		input(message: 'Do you like to release current version?', ok: 'Yes', 
                        parameters: [booleanParam(defaultValue: false, 
                        description: 'Do you want to releasemcurrent version?',name: 'Yes?')])
         
     		withCredentials([usernamePassword(credentialsId: "angeles", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                	def urlGit = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
			urlGit = urlGit.replace('https://','')
                
                	sh "git config user.email 'jenkins@example.com'"
                	
                	sh "git tag ${version}"
                
                	sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${urlGit} HEAD:master"
                	sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${urlGit} ${version}"
                 
            	}
	}
    chooseOptions = input(id: 'chooseOptions',
                message: 'Select zone(s)',    
                parameters: [                           
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option A'],    
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option B'],
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option C']
                ]   
              )
    
    }
  
  
    if( env == "PROD") {
    chooseOptions = input(id: 'chooseOptions',
                message: 'Select zone(s)',    
                parameters: [                           
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option A'],    
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option B'],
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option C']
                ]   
              )
    }
      echo "deploy to " + env
    }
}

def acceptance_test(){
    stage('acceptance tests'){
      echo "running acceptance test..."
    }
}

def performance_test(){
    stage('performance test'){
      echo "running performance tests..."
    }

}

def get_branch_type(String branch_name) {
    //Must be specified according to <flowInitContext> configuration of jgitflow-maven-plugin in pom.xml
    def master_pattern = ".*master"
    def release_pattern = ".*release/.*"
    def feature_pattern = ".*feature/.*"
    def pr_pattern = ".*PR-.*"
    def tag_pattern = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
    if (branch_name =~ master_pattern) {
        return "master"
    } else if (branch_name =~ release_pattern) {
        return "release"
    } else if (branch_name =~ feature_pattern) {
        return "feature"
    } else if (tag_pattern) {
        return "tag"
    } else if (branch_name =~ pr_pattern) {
        return "pr"
    } else {
        return null;
    }
}

// Increment the minor part of a `MAJOR.MINOR.PATCH` semver version.
String bumpMinorVersion(String version) {
    def parts = version.tokenize('.')
    if (parts.size() != 3) {
        error "${version} is not a valid MAJOR.MINOR.PATCH version"
    }
    def newMinorVersion = parts[1].toInteger() + 1

    return "${parts[0]}.${newMinorVersion}.${parts[2]}"
}


