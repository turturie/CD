node {
  try {
    //this needs to be the very first steps!
    checkout()
    def version = readFile("version.txt")

     
      
    def branch_type = get_branch_type(env.BRANCH_NAME)
    echo env.BRANCH_NAME
    echo branch_type
    currentBuild.displayName = "${version}-${BUILD_NUMBER}"
    
    
    if ( branch_type == "pr") {
      commit_stage()
    } else if ( branch_type == "master") {
      commit_stage()
      publish_artifact()
      deploy("INT")
      acceptance_test()
      deploy("PERF")
      performance_test()
      deploy("STG")
    } else if (branch_type == "tag") {
      
      deploy("PROD")
    }
    
      
    //def tag = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
    
  } finally {
      echo "doing some cleanup..."
  }
}

//utility
def checkout(){
  stage('checkout') {
    checkout scm
  }
}

def commit_stage() {
  stage('unit test') {
    echo "running unit test..."
  }
  stage('sonarQube'){
    echo "running static analysis..."
  }
}

def publish_artifact(){
  stage('publish') {
      echo "package and publish artifact..."
  }
}

def deploy(String env){
  stage(env + ' deploy'){
  if( env == "STG") {
    def versionInput = input(
        id: 'tag', message: 'tag as version: ', ok: 'ok', parameters: [string(description: 'enter the tag version for git', name: 'LIB_TEST')]
    )
    chooseOptions = input(id: 'chooseOptions',
                message: 'Select zone(s)',    
                parameters: [                           
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option A'],    
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option B'],
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option C']
                ]   
              )
     writeFile(file: "version.txt", text: versionInput, encoding: "UTF-8")
     sh "git push origin master"
     sh "git tag ${versionInput}"
     sh "git push origin ${versionInput}"
    }
  
  
    if( env == "PROD") {
    chooseOptions = input(id: 'chooseOptions',
                message: 'Select zone(s)',    
                parameters: [                           
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option A'],    
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option B'],
                  [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Option C']
                ]   
              )
    }
      echo "deploy to " + env
    }
}

def acceptance_test(){
    stage('acceptance tests'){
      echo "running acceptance test..."
    }
}

def performance_test(){
    stage('performance test'){
      echo "running performance tests..."
    }

}

def get_branch_type(String branch_name) {
    //Must be specified according to <flowInitContext> configuration of jgitflow-maven-plugin in pom.xml
    def master_pattern = ".*master"
    def release_pattern = ".*release/.*"
    def feature_pattern = ".*feature/.*"
    def pr_pattern = ".*PR-.*"
    def tag_pattern = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
    if (branch_name =~ master_pattern) {
        return "master"
    } else if (branch_name =~ release_pattern) {
        return "release"
    } else if (branch_name =~ feature_pattern) {
        return "feature"
    } else if (tag_pattern) {
        return "tag"
    } else if (branch_name =~ pr_pattern) {
        return "pr"
    } else {
        return null;
    }
}
